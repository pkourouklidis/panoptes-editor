FeatureStore{
	entities customer{keys customerID}, invoice{keys invoiceID}
	request data rq1
	features INVOICE_TOTAL_GROSS_AMOUNT:continuous{requires entities invoice},
		"SECTOR_DESC_Agriculture & Food":categorical{requires entities customer},
		"SECTOR_DESC_Automotive & Transport":categorical{requires entities customer}
	labels INVOICE_PAID_ON_TIME
	
}

Model PTP_XGBOOST{
    outputs PTP_XGBOOST_PRED2 predicts INVOICE_PAID_ON_TIME
    uses INVOICE_TOTAL_GROSS_AMOUNT
}

Model PTP_XGBOOST2{
    outputs PTP_XGBOOST_PRED predicts INVOICE_PAID_ON_TIME
    uses INVOICE_TOTAL_GROSS_AMOUNT
}

BaseAlgorithmRuntime PythonFunction{
	endpoint  "https://domain.com"
}

BaseAlgorithm kolmogorovSmirnov{
	codebase "https://domain.com"
	runtime PythonFunction
	severity levels 2
	accepts only categorical
	parameters pValue:Boolean
}

HigherOrderAlgorithmRuntime PythonFunctionHO{
	endpoint "https://domain.com"
}

HigherOrderAlgorithm timeSeriesAnalysis{
	codebase "https://domain.com"
	runtime PythonFunctionHO
	severity levels 2
}

Action emailSender{
	endpoint "https://domain.com"
	parameters mandatory email:String
}

Deployment PTP{
	model PTP_XGBOOST
	inputs invoice.invoiceID,customer.customerID

	ActionExecution emailMe{
		action emailSender
		parameter values email=panagiotis@bt.com
		
	}
	
		BaseAlgorithmExecution KS_INVOICE_TOTAL_GROSS_AMOUNT{
		algorithm kolmogorovSmirnov
		live data INVOICE_TOTAL_GROSS_AMOUNT, INVOICE_PAID_ON_TIME
	    historical data INVOICE_TOTAL_GROSS_AMOUNT
		actions 1->emailMe
		parameter values pValue = true
	}
	
	Trigger t1{
	every
	100 samples
	or
	every
	one week
	execute
	KS_INVOICE_TOTAL_GROSS_AMOUNT
	}
}