/*
 * generated by Xtext 2.25.0
 */
package org.lowcomote.panoptes.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.lowcomote.panoptes.services.PanoptesXGrammarAccess;
import panoptesDSL.ActionExecution;
import panoptesDSL.BaseAlgorithm;
import panoptesDSL.BaseAlgorithmExecution;
import panoptesDSL.BaseAlgorithmRuntime;
import panoptesDSL.CompositeTrigger;
import panoptesDSL.Deployment;
import panoptesDSL.Entity;
import panoptesDSL.Feature;
import panoptesDSL.FeatureStore;
import panoptesDSL.HigherOrderAlgorithm;
import panoptesDSL.HigherOrderAlgorithmExecution;
import panoptesDSL.HigherOrderAlgorithmRuntime;
import panoptesDSL.Key;
import panoptesDSL.Label;
import panoptesDSL.LabelBasedTrigger;
import panoptesDSL.Model;
import panoptesDSL.PanoptesDSLPackage;
import panoptesDSL.Platform;
import panoptesDSL.Prediction;
import panoptesDSL.PredictionBasedTrigger;
import panoptesDSL.RequestData;
import panoptesDSL.SampleBasedTrigger;
import panoptesDSL.TemporalTrigger;
import panoptesDSL.TriggerGroup;
import panoptesDSL.actionExecutionEntry;
import panoptesDSL.parameterValueEntry;

@SuppressWarnings("all")
public class PanoptesXSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PanoptesXGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PanoptesDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PanoptesDSLPackage.ACTION:
				sequence_Action(context, (panoptesDSL.Action) semanticObject); 
				return; 
			case PanoptesDSLPackage.ACTION_EXECUTION:
				sequence_ActionExecution(context, (ActionExecution) semanticObject); 
				return; 
			case PanoptesDSLPackage.BASE_ALGORITHM:
				sequence_BaseAlgorithm(context, (BaseAlgorithm) semanticObject); 
				return; 
			case PanoptesDSLPackage.BASE_ALGORITHM_EXECUTION:
				sequence_BaseAlgorithmExecution(context, (BaseAlgorithmExecution) semanticObject); 
				return; 
			case PanoptesDSLPackage.BASE_ALGORITHM_RUNTIME:
				sequence_BaseAlgorithmRuntime(context, (BaseAlgorithmRuntime) semanticObject); 
				return; 
			case PanoptesDSLPackage.COMPOSITE_TRIGGER:
				sequence_CompositeTrigger(context, (CompositeTrigger) semanticObject); 
				return; 
			case PanoptesDSLPackage.DEPLOYMENT:
				sequence_Deployment(context, (Deployment) semanticObject); 
				return; 
			case PanoptesDSLPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case PanoptesDSLPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case PanoptesDSLPackage.FEATURE_STORE:
				sequence_FeatureStore(context, (FeatureStore) semanticObject); 
				return; 
			case PanoptesDSLPackage.HIGHER_ORDER_ALGORITHM:
				sequence_HigherOrderAlgorithm(context, (HigherOrderAlgorithm) semanticObject); 
				return; 
			case PanoptesDSLPackage.HIGHER_ORDER_ALGORITHM_EXECUTION:
				sequence_HigherOrderAlgorithmExecution(context, (HigherOrderAlgorithmExecution) semanticObject); 
				return; 
			case PanoptesDSLPackage.HIGHER_ORDER_ALGORITHM_RUNTIME:
				sequence_HigherOrderAlgorithmRuntime(context, (HigherOrderAlgorithmRuntime) semanticObject); 
				return; 
			case PanoptesDSLPackage.KEY:
				sequence_Key(context, (Key) semanticObject); 
				return; 
			case PanoptesDSLPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case PanoptesDSLPackage.LABEL_BASED_TRIGGER:
				sequence_LabelBasedTrigger(context, (LabelBasedTrigger) semanticObject); 
				return; 
			case PanoptesDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case PanoptesDSLPackage.PARAMETER:
				sequence_Parameter(context, (panoptesDSL.Parameter) semanticObject); 
				return; 
			case PanoptesDSLPackage.PLATFORM:
				sequence_Platform(context, (Platform) semanticObject); 
				return; 
			case PanoptesDSLPackage.PREDICTION:
				sequence_Prediction(context, (Prediction) semanticObject); 
				return; 
			case PanoptesDSLPackage.PREDICTION_BASED_TRIGGER:
				sequence_PredictionBasedTrigger(context, (PredictionBasedTrigger) semanticObject); 
				return; 
			case PanoptesDSLPackage.REQUEST_DATA:
				sequence_RequestData(context, (RequestData) semanticObject); 
				return; 
			case PanoptesDSLPackage.SAMPLE_BASED_TRIGGER:
				sequence_SampleBasedTrigger(context, (SampleBasedTrigger) semanticObject); 
				return; 
			case PanoptesDSLPackage.TEMPORAL_TRIGGER:
				sequence_TemporalTrigger(context, (TemporalTrigger) semanticObject); 
				return; 
			case PanoptesDSLPackage.TRIGGER_GROUP:
				sequence_TriggerGroup(context, (TriggerGroup) semanticObject); 
				return; 
			case PanoptesDSLPackage.ACTION_EXECUTION_ENTRY:
				sequence_actionExecutionEntry(context, (actionExecutionEntry) semanticObject); 
				return; 
			case PanoptesDSLPackage.PARAMETER_VALUE_ENTRY:
				sequence_parameterValueEntry(context, (parameterValueEntry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActionExecution returns ActionExecution
	 *
	 * Constraint:
	 *     (name=EString (action=[Action|EString]? (parameterValueMap+=parameterValueEntry parameterValueMap+=parameterValueEntry*)?)+)
	 */
	protected void sequence_ActionExecution(ISerializationContext context, ActionExecution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=EString (endpoint=EString? (additionalParameters+=Parameter additionalParameters+=Parameter*)?)+)
	 */
	protected void sequence_Action(ISerializationContext context, panoptesDSL.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlgorithmExecution returns BaseAlgorithmExecution
	 *     BaseAlgorithmExecution returns BaseAlgorithmExecution
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (
	 *             algorithm=[BaseAlgorithm|EString]? 
	 *             (ActionExecutionMap+=actionExecutionEntry ActionExecutionMap+=actionExecutionEntry*)? 
	 *             (historicIOValues+=[ModelIO|EString] historicIOValues+=[ModelIO|EString]*)? 
	 *             (currentIOValues+=[ModelIO|EString] currentIOValues+=[ModelIO|EString]*)? 
	 *             (parameterValueMap+=parameterValueEntry parameterValueMap+=parameterValueEntry*)?
	 *         )+
	 *     )
	 */
	protected void sequence_BaseAlgorithmExecution(ISerializationContext context, BaseAlgorithmExecution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlgorithmRuntime returns BaseAlgorithmRuntime
	 *     BaseAlgorithmRuntime returns BaseAlgorithmRuntime
	 *
	 * Constraint:
	 *     (name=EString endpoint=EString?)
	 */
	protected void sequence_BaseAlgorithmRuntime(ISerializationContext context, BaseAlgorithmRuntime semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Algorithm returns BaseAlgorithm
	 *     BaseAlgorithm returns BaseAlgorithm
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (
	 *             (codebase=EString | runtime=[BaseAlgorithmRuntime|EString] | driftLevels=EIntegerObject)? 
	 *             (additionalParameters+=Parameter additionalParameters+=Parameter*)? 
	 *             (strict?='only'? supportedTypes+=statisticalVariableType supportedTypes+=statisticalVariableType*)?
	 *         )+
	 *     )
	 */
	protected void sequence_BaseAlgorithm(ISerializationContext context, BaseAlgorithm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CompositeTrigger returns CompositeTrigger
	 *
	 * Constraint:
	 *     (tt=TemporalTrigger | st=SampleBasedTrigger | pt=PredictionBasedTrigger | lt=LabelBasedTrigger)*
	 */
	protected void sequence_CompositeTrigger(ISerializationContext context, CompositeTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Deployment returns Deployment
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (
	 *             (mlModel=[Model|EString] | algorithmexecutions+=AlgorithmExecution | actionExecutions+=ActionExecution | triggerGroups+=TriggerGroup)? 
	 *             (inputs+=[DeploymentIO|EString] inputs+=[DeploymentIO|EString]*)?
	 *         )+
	 *     )
	 */
	protected void sequence_Deployment(ISerializationContext context, Deployment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=EString keys+=Key keys+=Key*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureStore returns FeatureStore
	 *
	 * Constraint:
	 *     (
	 *         (features+=Feature features+=Feature*) | 
	 *         (entities+=Entity entities+=Entity*) | 
	 *         (labels+=Label labels+=Label*) | 
	 *         (requestData+=RequestData requestData+=RequestData*)
	 *     )*
	 */
	protected void sequence_FeatureStore(ISerializationContext context, FeatureStore semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelIO returns Feature
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         type=statisticalVariableType? 
	 *         ((entities+=[Entity|EString] entities+=[Entity|EString]*) | (requestData+=[RequestData|EString] requestData+=[RequestData|EString]*))*
	 *     )
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlgorithmExecution returns HigherOrderAlgorithmExecution
	 *     HigherOrderAlgorithmExecution returns HigherOrderAlgorithmExecution
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (
	 *             (
	 *                 algorithm=[HigherOrderAlgorithm|EString] | 
	 *                 algorithmExecution=[AlgorithmExecution|EString] | 
	 *                 minDataPoints=EIntegerObject | 
	 *                 maxDataPoints=EIntegerObject
	 *             )? 
	 *             (ActionExecutionMap+=actionExecutionEntry ActionExecutionMap+=actionExecutionEntry*)? 
	 *             (parameterValueMap+=parameterValueEntry parameterValueMap+=parameterValueEntry*)?
	 *         )+
	 *     )
	 */
	protected void sequence_HigherOrderAlgorithmExecution(ISerializationContext context, HigherOrderAlgorithmExecution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlgorithmRuntime returns HigherOrderAlgorithmRuntime
	 *     HigherOrderAlgorithmRuntime returns HigherOrderAlgorithmRuntime
	 *
	 * Constraint:
	 *     (name=EString endpoint=EString?)
	 */
	protected void sequence_HigherOrderAlgorithmRuntime(ISerializationContext context, HigherOrderAlgorithmRuntime semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Algorithm returns HigherOrderAlgorithm
	 *     HigherOrderAlgorithm returns HigherOrderAlgorithm
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (
	 *             (codebase=EString | runtime=[HigherOrderAlgorithmRuntime|EString] | driftLevels=EIntegerObject)? 
	 *             (additionalParameters+=Parameter additionalParameters+=Parameter*)?
	 *         )+
	 *     )
	 */
	protected void sequence_HigherOrderAlgorithm(ISerializationContext context, HigherOrderAlgorithm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeploymentIO returns Key
	 *     Key returns Key
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Key(ISerializationContext context, Key semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.DEPLOYMENT_IO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.DEPLOYMENT_IO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LabelBasedTrigger returns LabelBasedTrigger
	 *
	 * Constraint:
	 *     frequency=EIntegerObject
	 */
	protected void sequence_LabelBasedTrigger(ISerializationContext context, LabelBasedTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.EVENT_BASED_TRIGGER__FREQUENCY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.EVENT_BASED_TRIGGER__FREQUENCY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelBasedTriggerAccess().getFrequencyEIntegerObjectParserRuleCall_1_0(), semanticObject.getFrequency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelIO returns Label
	 *     Label returns Label
	 *
	 * Constraint:
	 *     (name=EString type=statisticalVariableType?)
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=EString ((inputs+=[Feature|EString] inputs+=[Feature|EString]*) | output=Prediction)+)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (mandatory?='mandatory'? name=EString type=parameterType?)
	 */
	protected void sequence_Parameter(ISerializationContext context, panoptesDSL.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Platform returns Platform
	 *
	 * Constraint:
	 *     (
	 *         featureStore=FeatureStore | 
	 *         mlModels+=Model | 
	 *         deployments+=Deployment | 
	 *         algorithms+=Algorithm | 
	 *         algorithmRuntimes+=AlgorithmRuntime | 
	 *         actions+=Action
	 *     )+
	 */
	protected void sequence_Platform(ISerializationContext context, Platform semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PredictionBasedTrigger returns PredictionBasedTrigger
	 *
	 * Constraint:
	 *     frequency=EIntegerObject
	 */
	protected void sequence_PredictionBasedTrigger(ISerializationContext context, PredictionBasedTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.EVENT_BASED_TRIGGER__FREQUENCY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.EVENT_BASED_TRIGGER__FREQUENCY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredictionBasedTriggerAccess().getFrequencyEIntegerObjectParserRuleCall_1_0(), semanticObject.getFrequency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelIO returns Prediction
	 *     Prediction returns Prediction
	 *
	 * Constraint:
	 *     (name=EString label=[Label|EString]?)
	 */
	protected void sequence_Prediction(ISerializationContext context, Prediction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeploymentIO returns RequestData
	 *     RequestData returns RequestData
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_RequestData(ISerializationContext context, RequestData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.DEPLOYMENT_IO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.DEPLOYMENT_IO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequestDataAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SampleBasedTrigger returns SampleBasedTrigger
	 *
	 * Constraint:
	 *     frequency=EIntegerObject
	 */
	protected void sequence_SampleBasedTrigger(ISerializationContext context, SampleBasedTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.EVENT_BASED_TRIGGER__FREQUENCY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.EVENT_BASED_TRIGGER__FREQUENCY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSampleBasedTriggerAccess().getFrequencyEIntegerObjectParserRuleCall_1_0(), semanticObject.getFrequency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TemporalTrigger returns TemporalTrigger
	 *
	 * Constraint:
	 *     (frequency=frequencyEnum | cronString=EString)
	 */
	protected void sequence_TemporalTrigger(ISerializationContext context, TemporalTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TriggerGroup returns TriggerGroup
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         compositeTriggers+=CompositeTrigger 
	 *         compositeTriggers+=CompositeTrigger* 
	 *         targets+=[BaseAlgorithmExecution|EString] 
	 *         targets+=[BaseAlgorithmExecution|EString]*
	 *     )
	 */
	protected void sequence_TriggerGroup(ISerializationContext context, TriggerGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     actionExecutionEntry returns actionExecutionEntry
	 *
	 * Constraint:
	 *     (key=EIntegerObject value=[ActionExecution|EString])
	 */
	protected void sequence_actionExecutionEntry(ISerializationContext context, actionExecutionEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.ACTION_EXECUTION_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.ACTION_EXECUTION_ENTRY__KEY));
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.ACTION_EXECUTION_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.ACTION_EXECUTION_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionExecutionEntryAccess().getKeyEIntegerObjectParserRuleCall_1_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getActionExecutionEntryAccess().getValueActionExecutionEStringParserRuleCall_3_0_1(), semanticObject.eGet(PanoptesDSLPackage.Literals.ACTION_EXECUTION_ENTRY__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     parameterValueEntry returns parameterValueEntry
	 *
	 * Constraint:
	 *     (key=EString value=ParameterLiteral)
	 */
	protected void sequence_parameterValueEntry(ISerializationContext context, parameterValueEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.PARAMETER_VALUE_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.PARAMETER_VALUE_ENTRY__KEY));
			if (transientValues.isValueTransient(semanticObject, PanoptesDSLPackage.Literals.PARAMETER_VALUE_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PanoptesDSLPackage.Literals.PARAMETER_VALUE_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterValueEntryAccess().getKeyEStringParserRuleCall_1_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getParameterValueEntryAccess().getValueParameterLiteralParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
