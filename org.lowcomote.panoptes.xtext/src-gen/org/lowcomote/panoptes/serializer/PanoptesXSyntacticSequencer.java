/*
 * generated by Xtext 2.25.0
 */
package org.lowcomote.panoptes.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.lowcomote.panoptes.services.PanoptesXGrammarAccess;

@SuppressWarnings("all")
public class PanoptesXSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PanoptesXGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Feature___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__q;
	protected AbstractElementAlias match_HigherOrderAlgorithmExecution_MaxKeyword_4_4_0_1_or_MaximumKeyword_4_4_0_0;
	protected AbstractElementAlias match_HigherOrderAlgorithmExecution_MinKeyword_4_3_0_1_or_MinimumKeyword_4_3_0_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PanoptesXGrammarAccess) access;
		match_Feature___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getFeatureAccess().getLeftCurlyBracketKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getFeatureAccess().getRightCurlyBracketKeyword_2_2()));
		match_HigherOrderAlgorithmExecution_MaxKeyword_4_4_0_1_or_MaximumKeyword_4_4_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getHigherOrderAlgorithmExecutionAccess().getMaxKeyword_4_4_0_1()), new TokenAlias(false, false, grammarAccess.getHigherOrderAlgorithmExecutionAccess().getMaximumKeyword_4_4_0_0()));
		match_HigherOrderAlgorithmExecution_MinKeyword_4_3_0_1_or_MinimumKeyword_4_3_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getHigherOrderAlgorithmExecutionAccess().getMinKeyword_4_3_0_1()), new TokenAlias(false, false, grammarAccess.getHigherOrderAlgorithmExecutionAccess().getMinimumKeyword_4_3_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Feature___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__q.equals(syntax))
				emit_Feature___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HigherOrderAlgorithmExecution_MaxKeyword_4_4_0_1_or_MaximumKeyword_4_4_0_0.equals(syntax))
				emit_HigherOrderAlgorithmExecution_MaxKeyword_4_4_0_1_or_MaximumKeyword_4_4_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HigherOrderAlgorithmExecution_MinKeyword_4_3_0_1_or_MinimumKeyword_4_3_0_0.equals(syntax))
				emit_HigherOrderAlgorithmExecution_MinKeyword_4_3_0_1_or_MinimumKeyword_4_3_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString (ambiguity) (rule end)
	 *     type=statisticalVariableType (ambiguity) (rule end)
	 */
	protected void emit_Feature___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'maximum' | 'max'
	 *
	 * This ambiguous syntax occurs at:
	 *     ActionExecutionMap+=actionExecutionEntry (ambiguity) 'observations' maxDataPoints=EIntegerObject
	 *     algorithm=[HigherOrderAlgorithm|EString] (ambiguity) 'observations' maxDataPoints=EIntegerObject
	 *     algorithmExecution=[AlgorithmExecution|EString] (ambiguity) 'observations' maxDataPoints=EIntegerObject
	 *     maxDataPoints=EIntegerObject (ambiguity) 'observations' maxDataPoints=EIntegerObject
	 *     minDataPoints=EIntegerObject (ambiguity) 'observations' maxDataPoints=EIntegerObject
	 *     name=EString '{' (ambiguity) 'observations' maxDataPoints=EIntegerObject
	 *     parameterValueMap+=parameterValueEntry (ambiguity) 'observations' maxDataPoints=EIntegerObject
	 */
	protected void emit_HigherOrderAlgorithmExecution_MaxKeyword_4_4_0_1_or_MaximumKeyword_4_4_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'minimum' | 'min'
	 *
	 * This ambiguous syntax occurs at:
	 *     ActionExecutionMap+=actionExecutionEntry (ambiguity) 'observations' minDataPoints=EIntegerObject
	 *     algorithm=[HigherOrderAlgorithm|EString] (ambiguity) 'observations' minDataPoints=EIntegerObject
	 *     algorithmExecution=[AlgorithmExecution|EString] (ambiguity) 'observations' minDataPoints=EIntegerObject
	 *     maxDataPoints=EIntegerObject (ambiguity) 'observations' minDataPoints=EIntegerObject
	 *     minDataPoints=EIntegerObject (ambiguity) 'observations' minDataPoints=EIntegerObject
	 *     name=EString '{' (ambiguity) 'observations' minDataPoints=EIntegerObject
	 *     parameterValueMap+=parameterValueEntry (ambiguity) 'observations' minDataPoints=EIntegerObject
	 */
	protected void emit_HigherOrderAlgorithmExecution_MinKeyword_4_3_0_1_or_MinimumKeyword_4_3_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
