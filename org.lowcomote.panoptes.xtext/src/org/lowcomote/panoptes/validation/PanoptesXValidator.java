/*
 * generated by Xtext 2.25.0
 */
package org.lowcomote.panoptes.validation;

import org.eclipse.xtext.validation.Check;

import panoptesDSL.Execution;
import panoptesDSL.PanoptesDSLPackage;
import panoptesDSL.Parameter;
import panoptesDSL.parameterValueEntry;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class PanoptesXValidator extends AbstractPanoptesXValidator {
	
	public static final String MANDTORY_PARAMETER_MISSING = "mandatoryParameterMissing";
	public static final String UNKNOWN_PARAMETER = "unknownParameter";
	public static final String WRONG_TYPE = "wrongType";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					PanoptesXPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	@Check
	public void checkMandatoryParameters(Execution execution) {
		for (Parameter p : execution.getExecutable().getAdditionalParameters()) {
			if (p.isMandatory()) {
				boolean found = false;
				for (parameterValueEntry entry : execution.getParameterValueMap()) {
					if (entry.getKey().equals(p.getName())) {
						found = true;
						break;
					}
				}
				if (!found) {
					error("No value provided for mandatory parameter " + p.getName(),
							PanoptesDSLPackage.Literals.EXECUTION__PARAMETER_VALUE_MAP,
							UNKNOWN_PARAMETER);
				}
			}
		}
	}
	
	@Check
	public void checkUnknownParameters(Execution execution) {
		for (parameterValueEntry entry : execution.getParameterValueMap()) {
			boolean found = false;
			for (Parameter p : execution.getExecutable().getAdditionalParameters()) {
				if (entry.getKey().equals(p.getName())) {
					found = true;
					break;
				}
			}
			if (!found) {
				warning("Unknown parameter " + entry.getKey(),
						PanoptesDSLPackage.Literals.EXECUTION__PARAMETER_VALUE_MAP,
						MANDTORY_PARAMETER_MISSING);
			}
		}
	}
	
	@Check
	public void checkParameterTypes(Execution execution) {
		for (parameterValueEntry entry : execution.getParameterValueMap()) {
			Parameter parameter = null;
			for (Parameter p : execution.getExecutable().getAdditionalParameters()) {
				if (entry.getKey().equals(p.getName())) {
					parameter = p;
					break;
				}
			}
			if (parameter != null & parameter.getType()!=null) {
				switch(parameter.getType().getLiteral()) {
				case("Integer"):
					try {
						Integer.parseInt(entry.getValue());
					}
					catch(Exception e){
						error("Value of parameter " + entry.getKey() + " is not a valid Integer",
								PanoptesDSLPackage.Literals.EXECUTION__PARAMETER_VALUE_MAP,
								WRONG_TYPE);
					}
					break;
				case("Boolean"):
					if ( !entry.getValue().equals("true")  & !entry.getValue().equals("false")){
							error("Value of parameter " + entry.getKey() + " is not a valid Boolean",
									PanoptesDSLPackage.Literals.EXECUTION__PARAMETER_VALUE_MAP,
									WRONG_TYPE);
					}
					break;
				case("Real"):
					try {
						Double.parseDouble(entry.getValue());
					}
					catch(Exception e) {
						error("Value of parameter " + entry.getKey() + " is not a valid Real",
								PanoptesDSLPackage.Literals.EXECUTION__PARAMETER_VALUE_MAP,
								WRONG_TYPE);
					}
					break;
				}
			}
		}
	}
}
