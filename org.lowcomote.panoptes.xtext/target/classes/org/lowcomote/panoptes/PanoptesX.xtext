// automatically generated by Xtext
grammar org.lowcomote.panoptes.PanoptesX with org.eclipse.xtext.common.Terminals

import "http://www.lowcomote.org/panoptes/panoptesdsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Platform returns Platform:
	(
		featureStore=FeatureStore |
		mlModels+=Model |
		deployments+=Deployment | 
		algorithms+=Algorithm |
		algorithmRuntimes+=AlgorithmRuntime | 
		actions+=Action
	)*
	
;

Model returns Model:
	{Model}
	'Model'
	name=(STRING|SAFESTRING)
	'{'
		(
			('uses' inputs+=[Feature|EString] ( "," inputs+=[Feature|EString])*) &
			('outputs' output=Prediction)
		)
	'}';

FeatureStore returns FeatureStore:
	{FeatureStore}
	'FeatureStore'
	'{'
		(
			('features' features+=Feature (',' features+=Feature)*)? &
			('entities' entities+=Entity ( "," entities+=Entity)*)? &
			('labels' labels+=Label (',' labels+=Label)*)? &
			('request' 'data' requestData+=RequestData (',' requestData+=RequestData)*)?
		)
	'}'
;

Entity returns Entity:
	name=(STRING|SAFESTRING)
	'{'
		'keys' keys+=Key ( "," keys+=Key)*
	'}'
	;

ModelIO returns ModelIO:
	Feature | Prediction | Label;
	
Feature returns Feature:
	name=(STRING|SAFESTRING)
	(':' type=statisticalVariableType)?
	('{'
		(
			('requires' 'entities' entities+=[Entity|EString] ( "," entities+=[Entity|EString])*)? &
			('requires' 'request' 'data' requestData+=[RequestData|EString] ( "," requestData+=[RequestData|EString])*)?
		)
	'}')?
;

Prediction returns Prediction:
	{Prediction}
	name=(STRING|SAFESTRING)
	('predicts' label=[Label|EString])?
;

Label returns Label:
	{Label}
	name=(STRING|SAFESTRING)
	(':' type=statisticalVariableType)?
;
	
DeploymentIO returns DeploymentIO:
	Key | RequestData;

RequestData returns RequestData:
	{RequestData}
	name=(STRING|SAFESTRING);

Key returns Key:
	{Key}
	name=(STRING|SAFESTRING);

enum statisticalVariableType returns statisticalVariableType:
	continuous = 'continuous' | categorical = 'categorical' | orderedCategorical = 'ordered categorical';
	
Deployment returns Deployment:
	'Deployment'
	name=(STRING|SAFESTRING)
	'{'
		(
			'model' mlModel=[Model|EString] |
			('inputs' inputs+=[DeploymentIO|EString] ( "," inputs+=[DeploymentIO|EString])* ) |
			(algorithmexecutions+=AlgorithmExecution) |
			(actionExecutions+=ActionExecution) |
			(triggerGroups+=TriggerGroup)
		)*

	'}';

Algorithm returns Algorithm:
	BaseAlgorithm | HigherOrderAlgorithm;

BaseAlgorithm returns BaseAlgorithm:
	'BaseAlgorithm'
	name=(STRING|SAFESTRING)
	'{'
		(
			('codebase' codebase=(STRING|SAFESTRING)) &
			('runtime' runtime=[BaseAlgorithmRuntime|EString]) &
			('severity' 'levels' driftLevels=EIntegerObject) &
			('accepts' (strict?='only')? supportedTypes+=statisticalVariableType ( "," supportedTypes+=statisticalVariableType)*)? &
			('parameters' additionalParameters+=Parameter ( "," additionalParameters+=Parameter)*)?
		)
	'}';

HigherOrderAlgorithm returns HigherOrderAlgorithm:
	{HigherOrderAlgorithm}
	'HigherOrderAlgorithm'
	name=(STRING|SAFESTRING)
	'{'
		(
			('codebase' codebase=(STRING|SAFESTRING)) &
			('runtime' runtime=[HigherOrderAlgorithmRuntime|EString]) &
			('severity' 'levels' driftLevels=EIntegerObject) &
			('parameters' additionalParameters+=Parameter ( "," additionalParameters+=Parameter)*)?
		)
	'}';

AlgorithmRuntime returns AlgorithmRuntime:
	BaseAlgorithmRuntime|HigherOrderAlgorithmRuntime
;

BaseAlgorithmRuntime returns BaseAlgorithmRuntime:
	{BaseAlgorithmRuntime}
	'BaseAlgorithmRuntime'
	name=(STRING|SAFESTRING)
	('{'
		'endpoint' endpoint=(STRING|SAFESTRING)
	'}')?;

HigherOrderAlgorithmRuntime returns HigherOrderAlgorithmRuntime:
	{HigherOrderAlgorithmRuntime}
	'HigherOrderAlgorithmRuntime'
	name=(STRING|SAFESTRING)
	('{'
		'endpoint' endpoint=(STRING|SAFESTRING)
	'}')?;

AlgorithmExecution returns AlgorithmExecution:
	BaseAlgorithmExecution | HigherOrderAlgorithmExecution;

BaseAlgorithmExecution returns BaseAlgorithmExecution:
	{BaseAlgorithmExecution}
	'BaseAlgorithmExecution'
	name=(STRING|SAFESTRING)
	'{'
		(
			('algorithm' algorithm=[BaseAlgorithm|EString]) &
			('live' 'data' currentIOValues+=[ModelIO|EString] ( "," currentIOValues+=[ModelIO|EString])*)? &
			('historical' 'data' historicIOValues+=[ModelIO|EString] ( "," historicIOValues+=[ModelIO|EString])*)? &
			('actions' ActionExecutionMap+=actionExecutionEntry ( "," ActionExecutionMap+=actionExecutionEntry)*) &
			('parameter' 'values' parameterValueMap+=parameterValueEntry ( "," parameterValueMap+=parameterValueEntry)*)?
		)

	'}';

HigherOrderAlgorithmExecution returns HigherOrderAlgorithmExecution:
	{HigherOrderAlgorithmExecution}
	'HigherOrderAlgorithmExecution'
	name=(STRING|SAFESTRING)
	'{'
		(
			('algorithm' algorithm=[HigherOrderAlgorithm|EString]) &
			('observed' 'execution' algorithmExecution=[AlgorithmExecution|EString]) &
			('actions' ActionExecutionMap+=actionExecutionEntry ( "," ActionExecutionMap+=actionExecutionEntry)*) &
			(('minimum'|'min') 'observations' minDataPoints=EIntegerObject) &
			(('maximum'|'max') 'observations' maxDataPoints=EIntegerObject) &
			('parameter' 'values' parameterValueMap+=parameterValueEntry ( "," parameterValueMap+=parameterValueEntry)*)?
		)
	'}';

actionExecutionEntry returns actionExecutionEntry:
	{actionExecutionEntry}
	key=EIntegerObject
	'->'
	value=[ActionExecution|EString]
;

TriggerGroup returns TriggerGroup:
	{TriggerGroup}
	'Trigger'
	name=(STRING|SAFESTRING)
	'{'
	compositeTriggers+=CompositeTrigger ("or" compositeTriggers+=CompositeTrigger)*
	'execute' targets+=[BaseAlgorithmExecution|EString] ("," targets+=[BaseAlgorithmExecution|EString])*
	'}'
;

CompositeTrigger returns CompositeTrigger:
	{CompositeTrigger}
	'every'
	(
		(tt=TemporalTrigger)? &
		(st=SampleBasedTrigger)? &
		(pt=PredictionBasedTrigger)? &
		(lt=LabelBasedTrigger)?
	);

TemporalTrigger returns TemporalTrigger:
	{TemporalTrigger}
	('one' frequency=frequencyEnum) | (cronString=STRING);

enum frequencyEnum returns frequencyEnum:
	hourly = 'hour' | daily = 'day' | weekly = 'week' | monthly = 'month' | yearly = 'year';

SampleBasedTrigger returns SampleBasedTrigger:
	{SampleBasedTrigger}
	frequency=EIntegerObject 'samples';

PredictionBasedTrigger returns PredictionBasedTrigger:
	{PredictionBasedTrigger}
	frequency=EIntegerObject 'predictions';

LabelBasedTrigger returns LabelBasedTrigger:
	{LabelBasedTrigger}
	frequency=EIntegerObject 'labels';

Action returns Action:
	{Action}
	('Action')
	name=(STRING|SAFESTRING)
	'{'
		(
			('endpoint' endpoint=(STRING|SAFESTRING))? &
			('parameters' additionalParameters+=Parameter ( ',' additionalParameters+=Parameter)*)?
		)
	'}';
	
Parameter returns Parameter:
	{Parameter}
	(mandatory?='mandatory')?
	name=(STRING|SAFESTRING)
	 (':' type=parameterType)?
;

enum parameterType returns parameterType:
	Integer = 'Integer' | Real = 'Real' | String = 'String' | Boolean = 'Boolean';

parameterValueEntry returns parameterValueEntry:
	{parameterValueEntry}
	key=(STRING|SAFESTRING)
	'='
	value=EString
;

ActionExecution returns ActionExecution:
	{ActionExecution}
	('ActionExecution')
	name=(STRING|SAFESTRING)
	'{'
	(
		('action' action=[Action|EString]) &
		('parameter' 'values' parameterValueMap+=parameterValueEntry ( "," parameterValueMap+=parameterValueEntry)*)?
	)
	'}';

EIntegerObject returns ecore::EIntegerObject:
	INT;

EString returns ecore::EString:
	FLOAT | INT | STRING | SAFESTRING;

terminal FLOAT returns ecore::EFloat: '-'? ('0'..'9') '.' ('0'..'9')+;

@Override 
terminal INT returns ecore::EInt: '-'? ('0'..'9')+;

terminal SAFESTRING: ('a'..'z'|'A'..'Z'|'_'|'.'|'@') ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'@'|'0'..'9')*;
